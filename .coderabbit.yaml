# CodeRabbit AI Configuration for Metis
# Project: Agent runtime with experiential memory (GraphSAGE + PathRAG + ArangoDB)
# Stack: Python 3.12+, Go (proxies), ArangoDB, PyTorch, Transformers

language: en-US
tone_instructions: "Be concise, technically precise, and focus on performance, correctness, and maintainability. Prioritize security in database operations and memory management."

early_access: false

auto_review:
  enabled: true
  auto_incremental_review: true
  ignore_title_keywords:
    - "WIP"
    - "DO NOT REVIEW"
    - "DRAFT"

reviews:
  profile: "assertive"
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "<!-- CodeRabbit AI Summary -->"
  auto_title_placeholder: "<!-- CodeRabbit AI Title -->"
  poem: false
  review_status: true
  collapse_walkthrough: false
  sequence_diagrams: true
  changed_files_summary: true
  labeling_instructions: []

  # Path-specific review focus
  path_instructions:
    # ArangoDB client and proxies
    - path: "metis/database/**/*.{py,go}"
      instructions: |
        - Verify socket permission handling (RO: 0660, RW: 0660 dev/0600 prod)
        - Check HTTP/2 connection pooling and keep-alive
        - Validate SLO compliance (p50≤0.4ms upstream, p50≤0.8ms proxy overhead)
        - Review AQL query efficiency and injection prevention
        - Ensure proper resource cleanup (connections, cursors)
        - Check Go proxy error handling and logging
        - Validate Unix socket path configuration and error handling
        - Review proxy policy enforcement (RO: keyword blocking, RW: endpoint filtering)
        - Check admin operation permissions and idempotency

    # Embedders (Jina v4, sentence transformers)
    - path: "metis/embedders/**/*.py"
      instructions: |
        - Validate batch size handling and memory efficiency
        - Check CUDA/CPU device management
        - Ensure proper error handling for model loading
        - Review late chunking implementation
        - Verify embedding dimension consistency (2048 for Jina v4)
        - Check factory pattern correctness and model registry
        - Validate configuration loading and defaults

    # Extractors (TreeSitter, Docling, code parsing)
    - path: "metis/extractors/**/*.py"
      instructions: |
        - Check TreeSitter grammar loading and error handling
        - Validate code structure extraction accuracy
        - Review PDF/LaTeX extraction robustness
        - Ensure proper file encoding handling
        - Check factory pattern and file type detection
        - Validate extractor error handling and fallback mechanisms

    # Tests
    - path: "tests/**/*.py"
      instructions: |
        - Ensure proper test isolation and cleanup
        - Check mock usage is appropriate
        - Validate assertions are specific and meaningful
        - Review test coverage for critical paths
        - Ensure benchmarks validate SLOs

    # Configuration and schemas
    - path: "metis/config/**/*.py"
      instructions: |
        - Validate environment variable handling
        - Check default values are sensible
        - Ensure schema versioning is clear
        - Review configuration validation logic
        - Validate YAML loading and error handling

    # Utilities
    - path: "metis/utils/**/*.py"
      instructions: |
        - Check hashing consistency and collision resistance
        - Validate utility function edge cases
        - Ensure proper error handling

    # Examples
    - path: "examples/**/*.py"
      instructions: |
        - Ensure examples are up-to-date with API changes
        - Validate error handling in example code
        - Check documentation clarity and completeness

    # Backup and snapshot tools
    - path: "tools/backup/**/*.py"
      instructions: |
        - Verify arangodump/arangorestore command construction and error handling
        - Check snapshot metadata integrity and versioning
        - Validate retention policy logic (last 10, weekly for 3 months, permanent protection)
        - Ensure proper cleanup and rollback on failures
        - Review compression/decompression safety
        - Validate path handling and directory permissions
        - Check TCP endpoint usage is documented (issue #5 workaround)
        - Ensure environment variable handling (ARANGO_PASSWORD)
        - Validate CLI argument parsing and user confirmations

  # Tool integration
  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true

  # Security and best practices
  abort_on_close: true

chat:
  auto_reply: true

# File patterns to ignore
exclude:
  - "**/*.lock"
  - "**/*.pyc"
  - "**/__pycache__/**"
  - "**/node_modules/**"
  - "**/.venv/**"
  - "**/.mypy_cache/**"
  - "**/acheron/**"  # Archived legacy code
  - "**/models/checkpoints/**"  # Model weights
  - "**/models/*.pt"
  - "**/models/*.pth"
  - "**/.git/**"
  - "**/bin/**"  # Compiled binaries
  - "metis/database/proxies/bin/**"  # Go proxy binaries
  - "**/go.sum"  # Go dependency checksums
  - "**/*.sock"  # Unix socket files

# Known issues/patterns to watch for
knowledge_base:
  learnings:
    - "ArangoDB operations must enforce strict SLOs (p50≤0.4ms upstream, ~0.2ms proxy overhead)"
    - "Unix socket proxies: RO (0660) allows queries only, RW (0660 dev/0600 prod) allows DB-scoped mutations"
    - "Proxy security: RO blocks AQL DML keywords (INSERT, UPDATE, REPLACE, REMOVE, UPSERT) using word-boundary regex, RW blocks admin endpoints"
    - "RO proxy: DELETE allowed for cursor cleanup, PUT to cursor deprecated (use POST)"
    - "HTTP/2 client: Use persistent connections, handle timeouts properly, cleanup cursors"
    - "Jina v4: 32k context, 2048 dimensions, late chunking support, batch processing required"
    - "Socket permissions critical: RO 0660 group access, RW 0660 dev/0600 prod owner-only"
    - "Admin operations: Must use admin socket or RW socket, idempotent design required"
    - "Extractor factory: Detect file type by extension, use robust fallback on errors"
    - "Embedder configuration: Validate device (cuda/cpu), batch size, chunk parameters"
    - "Go proxy timeouts: Default 120s client, 10s dial, configurable via env vars"
    - "Import operations: Use on_duplicate='ignore' for idempotent ingestion"
    - "TreeSitter parsing: Handle grammar loading errors, validate language support"
    - "Backup strategy: Two-tier system - DR (ZFS snapshots, nightly) + operational (arangodump, on-demand)"
    - "Operational snapshots: Use TCP endpoint (http://127.0.0.1:8529) due to Go proxy limitation (issue #5)"
    - "Backup defaults: include_bulk=False (bulk storage is already the archive, no need to back up backup)"
    - "Snapshot retention: Keep last 10, weekly for 3 months, never delete permanent snapshots"
    - "DR backups: ZFS snapshot of dbpool/arangodb dataset, instant and space-efficient"
    - "Backup performance: TCP acceptable for backups (not time-sensitive like inference operations)"
